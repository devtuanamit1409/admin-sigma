{"version":3,"file":"static/js/8775.c6228b99.chunk.js","mappings":"iQAcA,MA2MA,EA3MiBA,KACf,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,CAC/BC,MAAO,GACPC,YAAa,GACbC,SAAU,GACVC,aAAc,GACdC,YAAa,GACbC,eAAgB,MAGXC,EAAiBC,IAAsBR,EAAAA,EAAAA,UAAS,OAChDS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,OAClDW,EAAoBC,IAAyBZ,EAAAA,EAAAA,UAAS,OACtDa,EAAqBC,IAA0Bd,EAAAA,EAAAA,UAAS,OAE/De,EAAAA,EAAAA,YAAU,KACRC,GAAS,GACR,IAEH,MAAMA,EAAUC,UACd,IACE,MAAMC,QAAiBC,EAAAA,EAAMC,IAAI,oCACjCrB,EAAQmB,EAASpB,MACboB,EAASpB,KAAKI,aAChBU,EAAsB,2BAADS,OACQH,EAASpB,KAAKI,cAGzCgB,EAASpB,KAAKM,cAChBU,EAAuB,2BAADO,OACOH,EAASpB,KAAKM,cAG/C,CAAE,MAAOkB,GACPC,QAAQC,MAAMF,EAAIG,QACpB,GAGIC,EAAqBC,IACzB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1B/B,EAAQ,IAAKD,EAAM,CAAC8B,GAAOC,GAAQ,EAG/BE,EAAoBJ,IACxB,MAAM,KAAEC,EAAI,MAAEI,GAAUL,EAAEG,OACpBG,EAAOD,EAAM,GACN,gBAATJ,GACFpB,EAAmByB,GACnBrB,EAAsBsB,IAAIC,gBAAgBF,KACxB,iBAATL,IACTlB,EAAoBuB,GACpBnB,EAAuBoB,IAAIC,gBAAgBF,IAC7C,EAmCF,OACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,SAAS,KAAIC,UACtBC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,GAAI,CAAEC,GAAI,GAAIJ,SAAA,EACjBH,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,EAAAR,SAAC,iBAGrDH,EAAAA,EAAAA,KAAA,QAAMY,SAtCS/B,UACnBU,EAAEsB,iBACF,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,QAAStD,EAAKG,OAC9BiD,EAASE,OAAO,WAAYtD,EAAKK,UACjC+C,EAASE,OAAO,cAAetD,EAAKO,aACpC6C,EAASE,OAAO,iBAAkBtD,EAAKQ,gBACnCC,GACF2C,EAASE,OAAO,cAAe7C,GAE7BE,GACFyC,EAASE,OAAO,eAAgB3C,GAGlC,IACE,MAAMS,QAAiBC,EAAAA,EAAMkC,IAC3B,mCACAH,EACA,CACEI,QAAS,CACP,eAAgB,yBAItBvD,EAAQmB,EAASpB,MACjByD,MAAM,6BACR,CAAE,MAAOjC,GACPC,QAAQC,MAAMF,EAAIG,SAClB8B,MAAM,wBACR,GASiChB,UAC3BC,EAAAA,EAAAA,MAACgB,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAEnB,SAAA,EACzBH,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,UAChBH,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,QACNnC,KAAK,QACLC,MAAO/B,EAAKG,MACZ+D,SAAUtC,EACVuC,UAAQ,OAGZ7B,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,UAChBH,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,YACNnC,KAAK,WACLC,MAAO/B,EAAKK,SACZ6D,SAAUtC,EACVuC,UAAQ,OAGZ7B,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,UAChBH,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,cACNnC,KAAK,cACLC,MAAO/B,EAAKO,YACZ2D,SAAUtC,EACVwC,WAAS,EACTC,KAAM,EACNF,UAAQ,OAGZ7B,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,UAChBH,EAAAA,EAAAA,KAACyB,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAM,kBACNnC,KAAK,iBACLC,MAAO/B,EAAKQ,eACZ0D,SAAUtC,EACVwC,WAAS,EACTC,KAAM,EACNF,UAAQ,OAGZzB,EAAAA,EAAAA,MAACgB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,SAAA,EAChBC,EAAAA,EAAAA,MAAC4B,EAAAA,EAAM,CAACvB,QAAQ,YAAYC,UAAU,QAAOP,SAAA,CAAC,uBAE5CH,EAAAA,EAAAA,KAAA,SACEiC,KAAK,OACLzC,KAAK,cACL0C,QAAM,EACNN,SAAUjC,OAGbpB,IACC6B,EAAAA,EAAAA,MAAC+B,EAAAA,EAAI,CAAC7B,GAAI,CAAE8B,GAAI,GAAIjC,SAAA,EAClBH,EAAAA,EAAAA,KAACqC,EAAAA,EAAS,CACR3B,UAAU,MACV4B,OAAO,MACPC,MAAOhE,EACPiE,IAAI,kBAENxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAW,CAAAtC,UACVH,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQiC,MAAM,iBAAgBvC,SAAC,kCAO3DC,EAAAA,EAAAA,MAACgB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,SAAA,EAChBC,EAAAA,EAAAA,MAAC4B,EAAAA,EAAM,CAACvB,QAAQ,YAAYC,UAAU,QAAOP,SAAA,CAAC,wBAE5CH,EAAAA,EAAAA,KAAA,SACEiC,KAAK,OACLzC,KAAK,eACL0C,QAAM,EACNN,SAAUjC,OAGblB,IACC2B,EAAAA,EAAAA,MAAC+B,EAAAA,EAAI,CAAC7B,GAAI,CAAE8B,GAAI,GAAIjC,SAAA,EAClBH,EAAAA,EAAAA,KAACqC,EAAAA,EAAS,CACR3B,UAAU,MACV4B,OAAO,MACPC,MAAO9D,EACP+D,IAAI,mBAENxC,EAAAA,EAAAA,KAACyC,EAAAA,EAAW,CAAAtC,UACVH,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,QAAQ,QAAQiC,MAAM,iBAAgBvC,SAAC,mCAO3DH,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAGrB,UAChBH,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,CAACvB,QAAQ,YAAYiC,MAAM,UAAUT,KAAK,SAAQ9B,SAAC,2BAOxD,C,gICnNT,SAASwC,EAA2BC,GACzC,OAAOC,EAAAA,EAAAA,IAAqB,iBAAkBD,EAChD,EAC2BE,EAAAA,EAAAA,GAAuB,iBAAkB,CAAC,S,aCDrE,MAAMC,EAAY,CAAC,YAAa,aAkB1BC,GAAkBC,EAAAA,EAAAA,IAAO,MAAO,CACpCzD,KAAM,iBACNoD,KAAM,OACNM,kBAAmBA,CAACC,EAAOC,IAAWA,EAAOC,MAHvBJ,EAIrB,KACM,CACLK,QAAS,GACT,eAAgB,CACdC,cAAe,QAoDrB,EAhDiCC,EAAAA,YAAiB,SAAqBC,EAASC,GAC9E,MAAMP,GAAQQ,EAAAA,EAAAA,GAAc,CAC1BR,MAAOM,EACPjE,KAAM,oBAEF,UACFoE,EAAS,UACTlD,EAAY,OACVyC,EACJU,GAAQC,EAAAA,EAAAA,GAA8BX,EAAOJ,GACzCgB,GAAaC,EAAAA,EAAAA,GAAS,CAAC,EAAGb,EAAO,CACrCzC,cAEIuD,EAlCkBF,KACxB,MAAM,QACJE,GACEF,EAIJ,OAAOG,EAAAA,EAAAA,GAHO,CACZb,KAAM,CAAC,SAEoBV,EAA4BsB,EAAQ,EA2BjDE,CAAkBJ,GAClC,OAAoB/D,EAAAA,EAAAA,KAAKgD,GAAiBgB,EAAAA,EAAAA,GAAS,CACjDI,GAAI1D,EACJkD,WAAWS,EAAAA,EAAAA,GAAKJ,EAAQZ,KAAMO,GAC9BG,WAAYA,EACZL,IAAKA,GACJG,GACL,G","sources":["app/views/dashboard/info/index.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Container,\r\n  Box,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  Grid,\r\n  Card,\r\n  CardMedia,\r\n  CardContent,\r\n} from \"@mui/material\";\r\n\r\nconst InfoPage = () => {\r\n  const [data, setData] = useState({\r\n    title: \"\",\r\n    firstBanner: \"\",\r\n    subTitle: \"\",\r\n    secondBanner: \"\",\r\n    description: \"\",\r\n    subDescription: \"\",\r\n  });\r\n\r\n  const [firstBannerFile, setFirstBannerFile] = useState(null);\r\n  const [secondBannerFile, setSecondBannerFile] = useState(null);\r\n  const [firstBannerPreview, setFirstBannerPreview] = useState(null);\r\n  const [secondBannerPreview, setSecondBannerPreview] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getInfo();\r\n  }, []);\r\n\r\n  const getInfo = async () => {\r\n    try {\r\n      const response = await axios.get(\"https://demo-sigma.site/api/info\");\r\n      setData(response.data);\r\n      if (response.data.firstBanner) {\r\n        setFirstBannerPreview(\r\n          `https://demo-sigma.site/${response.data.firstBanner}`\r\n        );\r\n      }\r\n      if (response.data.secondBanner) {\r\n        setSecondBannerPreview(\r\n          `https://demo-sigma.site/${response.data.secondBanner}`\r\n        );\r\n      }\r\n    } catch (err) {\r\n      console.error(err.message);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setData({ ...data, [name]: value });\r\n  };\r\n\r\n  const handleFileChange = (e) => {\r\n    const { name, files } = e.target;\r\n    const file = files[0];\r\n    if (name === \"firstBanner\") {\r\n      setFirstBannerFile(file);\r\n      setFirstBannerPreview(URL.createObjectURL(file));\r\n    } else if (name === \"secondBanner\") {\r\n      setSecondBannerFile(file);\r\n      setSecondBannerPreview(URL.createObjectURL(file));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append(\"title\", data.title);\r\n    formData.append(\"subTitle\", data.subTitle);\r\n    formData.append(\"description\", data.description);\r\n    formData.append(\"subDescription\", data.subDescription);\r\n    if (firstBannerFile) {\r\n      formData.append(\"firstBanner\", firstBannerFile);\r\n    }\r\n    if (secondBannerFile) {\r\n      formData.append(\"secondBanner\", secondBannerFile);\r\n    }\r\n\r\n    try {\r\n      const response = await axios.put(\r\n        \"https://demo-sigma.site/api/info\",\r\n        formData,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"multipart/form-data\",\r\n          },\r\n        }\r\n      );\r\n      setData(response.data);\r\n      alert(\"Info updated successfully!\");\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      alert(\"Failed to update info\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Box sx={{ my: 4 }}>\r\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n          Update Info\r\n        </Typography>\r\n        <form onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Title\"\r\n                name=\"title\"\r\n                value={data.title}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Sub Title\"\r\n                name=\"subTitle\"\r\n                value={data.subTitle}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Description\"\r\n                name=\"description\"\r\n                value={data.description}\r\n                onChange={handleInputChange}\r\n                multiline\r\n                rows={4}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Sub Description\"\r\n                name=\"subDescription\"\r\n                value={data.subDescription}\r\n                onChange={handleInputChange}\r\n                multiline\r\n                rows={2}\r\n                required\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" component=\"label\">\r\n                Upload First Banner\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"firstBanner\"\r\n                  hidden\r\n                  onChange={handleFileChange}\r\n                />\r\n              </Button>\r\n              {firstBannerPreview && (\r\n                <Card sx={{ mt: 2 }}>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    height=\"200\"\r\n                    image={firstBannerPreview}\r\n                    alt=\"First Banner\"\r\n                  />\r\n                  <CardContent>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      First Banner Preview\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" component=\"label\">\r\n                Upload Second Banner\r\n                <input\r\n                  type=\"file\"\r\n                  name=\"secondBanner\"\r\n                  hidden\r\n                  onChange={handleFileChange}\r\n                />\r\n              </Button>\r\n              {secondBannerPreview && (\r\n                <Card sx={{ mt: 2 }}>\r\n                  <CardMedia\r\n                    component=\"img\"\r\n                    height=\"200\"\r\n                    image={secondBannerPreview}\r\n                    alt=\"Second Banner\"\r\n                  />\r\n                  <CardContent>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                      Second Banner Preview\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n                Update Info\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InfoPage;\r\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"names":["InfoPage","data","setData","useState","title","firstBanner","subTitle","secondBanner","description","subDescription","firstBannerFile","setFirstBannerFile","secondBannerFile","setSecondBannerFile","firstBannerPreview","setFirstBannerPreview","secondBannerPreview","setSecondBannerPreview","useEffect","getInfo","async","response","axios","get","concat","err","console","error","message","handleInputChange","e","name","value","target","handleFileChange","files","file","URL","createObjectURL","_jsx","Container","maxWidth","children","_jsxs","Box","sx","my","Typography","variant","component","gutterBottom","onSubmit","preventDefault","formData","FormData","append","put","headers","alert","Grid","container","spacing","item","xs","TextField","fullWidth","label","onChange","required","multiline","rows","Button","type","hidden","Card","mt","CardMedia","height","image","alt","CardContent","color","getCardContentUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardContentRoot","styled","overridesResolver","props","styles","root","padding","paddingBottom","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}