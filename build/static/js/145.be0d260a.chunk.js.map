{"version":3,"file":"static/js/145.be0d260a.chunk.js","mappings":"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","sources":["app/views/dashboard/contact/index.js","../node_modules/@mui/material/TableContainer/tableContainerClasses.js","../node_modules/@mui/material/TableContainer/TableContainer.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TablePagination,\r\n  Paper,\r\n  Typography,\r\n  Card,\r\n  CardMedia,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\n\r\nconst ContactList = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [totalContacts, setTotalContacts] = useState(0);\r\n\r\n  const getContacts = async () => {\r\n    try {\r\n      const res = await axios.get(\r\n        `https://demo-sigma.site/api/contact?page=${\r\n          page + 1\r\n        }&limit=${rowsPerPage}`\r\n      );\r\n      const data = res.data;\r\n      setContacts(data.contacts);\r\n      setTotalContacts(data.totalContacts);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getContacts();\r\n  }, [page, rowsPerPage]);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Box sx={{ my: 4 }}>\r\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom>\r\n          Contact List\r\n        </Typography>\r\n        <TableContainer component={Paper}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Image</TableCell>\r\n                <TableCell>First Name</TableCell>\r\n                <TableCell>Last Name</TableCell>\r\n                <TableCell>Phone</TableCell>\r\n                <TableCell>Birth Date</TableCell>\r\n                <TableCell>Email</TableCell>\r\n                <TableCell>Title</TableCell>\r\n                <TableCell>Content</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {contacts.map((contact) => (\r\n                <TableRow key={contact._id}>\r\n                  <TableCell>\r\n                    {contact.image && (\r\n                      <Card>\r\n                        <CardMedia\r\n                          component=\"img\"\r\n                          height=\"140\"\r\n                          image={`https://demo-sigma.site/${contact.image.replace(\r\n                            /\\\\/g,\r\n                            \"/\"\r\n                          )}`}\r\n                          alt={contact.firstName}\r\n                        />\r\n                      </Card>\r\n                    )}\r\n                  </TableCell>\r\n                  <TableCell>{contact.firstName}</TableCell>\r\n                  <TableCell>{contact.lastName}</TableCell>\r\n                  <TableCell>{contact.phone}</TableCell>\r\n                  <TableCell>\r\n                    {new Date(contact.birthDate).toLocaleDateString()}\r\n                  </TableCell>\r\n                  <TableCell>{contact.email}</TableCell>\r\n                  <TableCell>{contact.title}</TableCell>\r\n                  <TableCell>{contact.content}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={totalContacts}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n          />\r\n        </TableContainer>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiTableContainer', slot);\n}\nconst tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);\nexport default tableContainerClasses;","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport { getTableContainerUtilityClass } from './tableContainerClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableContainerUtilityClass, classes);\n};\nconst TableContainerRoot = styled('div', {\n  name: 'MuiTableContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})({\n  width: '100%',\n  overflowX: 'auto'\n});\nconst TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiTableContainer'\n  });\n  const {\n      className,\n      component = 'div'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    component\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableContainerRoot, _extends({\n    ref: ref,\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableContainer;"],"names":["ContactList","contacts","setContacts","useState","page","setPage","rowsPerPage","setRowsPerPage","totalContacts","setTotalContacts","useEffect","async","data","axios","get","concat","error","console","getContacts","_jsx","Container","maxWidth","children","_jsxs","Box","sx","my","Typography","variant","component","gutterBottom","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","contact","image","Card","CardMedia","height","replace","alt","firstName","lastName","phone","Date","birthDate","toLocaleDateString","email","title","content","_id","TablePagination","rowsPerPageOptions","count","onPageChange","handleChangePage","event","newPage","onRowsPerPageChange","parseInt","target","value","getTableContainerUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","TableContainerRoot","styled","name","overridesResolver","props","styles","root","width","overflowX","React","inProps","ref","useThemeProps","className","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","as","clsx"],"sourceRoot":""}